`begin_keywords "1800-2023"
`line 1 "sha256_processor.v" 1
`timescale 1ns/1ps
/*verilator lint_off WIDTHEXPAND*/ 
/*verilator lint_off WIDTH*/ 
/*verilator lint_off CASEINCOMPLETE*/ 
/*verilator lint_off UNUSEDPARAM*/ 

`line 7 "sha256_processor.v" 0
module sha256_processor (
    input         clk,
    input         rst,
    input         start,
    input  [7:0]  data_in,
    input         data_valid,
    input         data_last,
    output [255:0] hash_out,
    output        done
);

`line 18 "sha256_processor.v" 0
     
    localparam BLOCK_SIZE = 64;

`line 21 "sha256_processor.v" 0
     
    reg [511:0] block_buffer;
    reg [5:0]   byte_index;
    reg         block_ready;

`line 26 "sha256_processor.v" 0
     
    reg [2:0] state;
    localparam IDLE=0, LOAD=1, PAD=2, HASH=3, DONE=4;

`line 30 "sha256_processor.v" 0
     
    wire [255:0] core_hash_out;
    wire         core_ready;
    reg          core_start;
    reg  [511:0] core_block;
    reg  [255:0] core_hash_init;
    reg          core_use_init;

`line 38 "sha256_processor.v" 0
    sha256_core sha_core (
        .clk(clk),
        .rst(rst),
        .start(core_start),
        .block_in(core_block),
        .hash_init(core_hash_init),
        .use_init(core_use_init),
        .hash_out(core_hash_out),
        .ready(core_ready)
    );

`line 49 "sha256_processor.v" 0
    reg [255:0] hash_state;
    assign hash_out = hash_state;
    assign done = (state == DONE);

`line 53 "sha256_processor.v" 0
    reg [63:0] total_bits;
    reg        seen_last;
    reg        need_length_block;
    reg [5:0]  pad_index;

`line 58 "sha256_processor.v" 0
    integer i;

`line 60 "sha256_processor.v" 0
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            state <= IDLE;
            byte_index <= 0;
            block_ready <= 0;
            core_start <= 0;
            core_block <= 0;
            core_hash_init <= 0;
            core_use_init <= 0;
            hash_state <= 256'h6a09e667bb67ae853c6ef372a54ff53a510e527f9b05688c1f83d9ab5be0cd19;
            total_bits <= 0;
            seen_last <= 0;
            need_length_block <= 0;
            pad_index <= 0;
        end else begin
            case (state)
                IDLE: begin
                    if (start) begin
                        hash_state <= 256'h6a09e667bb67ae853c6ef372a54ff53a510e527f9b05688c1f83d9ab5be0cd19;
                        state <= LOAD;
                        byte_index <= 0;
                        total_bits <= 0;
                        seen_last <= 0;
                        need_length_block <= 0;
                        pad_index <= 0;
                    end
                end

`line 88 "sha256_processor.v" 0
                LOAD: begin
                    if (data_valid && byte_index < BLOCK_SIZE) begin
                        block_buffer[511 - byte_index*8 -: 8] <= data_in;
                        total_bits <= total_bits + 8;
                        
                        if (data_last) begin
                            seen_last <= 1;
                            if (byte_index + 1 == BLOCK_SIZE) begin
                                 
                                byte_index <= byte_index + 1;
                                block_ready <= 1;
                                state <= HASH;
                                need_length_block <= 1;
                            end else begin
                                byte_index <= byte_index + 1;  
                                state <= PAD;
                            end
                        end else begin
                            byte_index <= byte_index + 1;
                            if (byte_index + 1 == BLOCK_SIZE) begin
                                 
                                block_ready <= 1;
                                state <= HASH;
                            end
                        end
                    end else if (seen_last) begin
                         
                        state <= PAD;
                    end
                end

`line 119 "sha256_processor.v" 0
                PAD: begin
                    if (pad_index == 0) begin
                         
                        block_buffer[511 - (byte_index * 8) -: 8] <= 8'h80;
                        pad_index <= byte_index + 1;

`line 125 "sha256_processor.v" 0
                        if (byte_index < 56) begin
                            need_length_block <= 0;
                        end else begin
                            need_length_block <= 1;
                        end
                    end else if ((pad_index < 56) || (need_length_block && pad_index < 64)) begin
                        block_buffer[511 - (pad_index * 8) -: 8] <= 8'h00;
                        pad_index <= pad_index + 1;
                    end else begin
                        if (!need_length_block) begin
                             
                            for (i = 0; i < 8; i = i + 1)
                                block_buffer[63 - i*8 -: 8] <= total_bits[63 - i*8 -: 8];
                        end
                        block_ready <= 1;
                        state <= HASH;
                        pad_index <= 0;
                    end
                end

`line 145 "sha256_processor.v" 0
                HASH: begin
                    if (block_ready && !core_ready) begin
                        core_block <= block_buffer;
                        core_hash_init <= hash_state;
                        core_use_init <= 1;
                        core_start <= 1;
                        block_ready <= 0;
                    end else begin
                        core_start <= 0;
                    end

`line 156 "sha256_processor.v" 0
                    if (core_ready) begin
                        hash_state <= core_hash_out;

`line 159 "sha256_processor.v" 0
                        if (seen_last && need_length_block) begin
                             
                            block_buffer <= 512'b0;
                             
                            block_buffer[511:504] <= 8'h80;

`line 165 "sha256_processor.v" 0
                             
                            
                            for (i = 0; i < 8; i = i + 1)
                                block_buffer[63 - i*8 -: 8] <= total_bits[63 - i*8 -: 8];

`line 170 "sha256_processor.v" 0
                            block_ready <= 1;
                            need_length_block <= 0;
                        end else if (seen_last && !need_length_block) begin
                            state <= DONE;
                        end else begin
                            byte_index <= 0;
                            state <= LOAD;
                        end
                    end
                end

`line 181 "sha256_processor.v" 0
                DONE: begin
                    core_start <= 0;
                end
            endcase
        end
    end

`line 188 "sha256_processor.v" 0
endmodule

`line 190 "sha256_processor.v" 0

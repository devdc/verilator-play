// Dump of all post-preprocessor input
// Blank lines and `line directives have been removed
//
// Information:
//   Verilator 5.028 2024-08-21 rev UNKNOWN.REV
//   Arguments: --cc --exe --build -Wall -Wno-fatal --trace --timing --assert --debug sha256_processor.v sha256_core.v sha256_processor_tb.v sim_main.cpp --top-module sha256_processor_tb
//   Build jobs: 1
//   Verilate jobs: 1

`begin_keywords "1800-2023"
`timescale 1ns/1ps
/*verilator lint_off WIDTHEXPAND*/ 
/*verilator lint_off WIDTH*/ 
/*verilator lint_off CASEINCOMPLETE*/ 
/*verilator lint_off UNUSEDPARAM*/ 
module sha256_processor (
    input         clk,
    input         rst,
    input         start,
    input  [7:0]  data_in,
    input         data_valid,
    input         data_last,
    output [255:0] hash_out,
    output        done
);
    localparam BLOCK_SIZE = 64;
    reg [511:0] block_buffer;
    reg [5:0]   byte_index;
    reg         block_ready;
    reg [2:0] state;
    localparam IDLE=0, LOAD=1, PAD=2, HASH=3, DONE=4;
    wire [255:0] core_hash_out;
    wire         core_ready;
    reg          core_start;
    reg  [511:0] core_block;
    reg  [255:0] core_hash_init;
    reg          core_use_init;
    reg          core_busy;
    sha256_core sha_core (
        .clk(clk),
        .rst(rst),
        .start(core_start),
        .block_in(core_block),
        .hash_init(core_hash_init),
        .use_init(core_use_init),
        .hash_out(core_hash_out),
        .ready(core_ready)
    );
    reg [255:0] hash_state;
    assign hash_out = hash_state;
    assign done = (state == DONE);
    reg [63:0] total_bits;
    reg        seen_last;
    reg        need_length_block;
    reg [5:0]  pad_index;
    integer i;
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            state <= IDLE;
            byte_index <= 0;
            block_ready <= 0;
            core_start <= 0;
            core_block <= 0;
            core_hash_init <= 0;
            core_use_init <= 0;
            core_busy <= 0;
            hash_state <= 256'h6a09e667bb67ae853c6ef372a54ff53a510e527f9b05688c1f83d9ab5be0cd19;
            total_bits <= 0;
            seen_last <= 0;
            need_length_block <= 0;
            pad_index <= 0;
        end else begin
            case (state)
                IDLE: begin
                    if (start) begin
                        hash_state <= 256'h6a09e667bb67ae853c6ef372a54ff53a510e527f9b05688c1f83d9ab5be0cd19;
                        state <= LOAD;
                        byte_index <= 0;
                        total_bits <= 0;
                        seen_last <= 0;
                        need_length_block <= 0;
                        pad_index <= 0;
                    end
                end
                LOAD: begin
                    if (data_valid && byte_index < BLOCK_SIZE) begin
                        block_buffer[511 - byte_index*8 -: 8] <= data_in;
                        total_bits <= total_bits + 8;
                        if (data_last) begin
                            seen_last <= 1;
                            if (byte_index + 1 == BLOCK_SIZE) begin
                                byte_index <= byte_index + 1;
                                block_ready <= 1;
                                state <= HASH;
                                need_length_block <= 1;
                            end else begin
                                byte_index <= byte_index + 1;  
                                state <= PAD;
                            end
                        end else begin
                            byte_index <= byte_index + 1;
                            if (byte_index + 1 == BLOCK_SIZE) begin
                                block_ready <= 1;
                                state <= HASH;
                            end
                        end
                    end else if (seen_last) begin
                        state <= PAD;
                    end
                end
                PAD: begin
                    if (pad_index == 0) begin
                        block_buffer[511 - (byte_index * 8) -: 8] <= 8'h80;
                        pad_index <= byte_index + 1;
                        if (byte_index < 56) begin
                            need_length_block <= 0;
                        end else begin
                            need_length_block <= 1;
                        end
                    end else if ((pad_index < 56) || (need_length_block && pad_index < 64)) begin
                        block_buffer[511 - (pad_index * 8) -: 8] <= 8'h00;
                        pad_index <= pad_index + 1;
                    end else begin
                        if (!need_length_block) begin
                            for (i = 0; i < 8; i = i + 1)
                                block_buffer[63 - i*8 -: 8] <= total_bits[63 - i*8 -: 8];
                        end
                        block_ready <= 1;
                        state <= HASH;
                        pad_index <= 0;
                    end
                end
                HASH: begin
                    if (block_ready && !core_busy) begin
                        core_block <= block_buffer;
                        core_hash_init <= hash_state;
                        core_use_init <= 1;
                        core_start <= 1;
                        block_ready <= 0;
                        core_busy <= 1;
                    end else begin
                        core_start <= 0;
                    end
                    if (core_ready) begin
                        core_busy <= 0;
                        hash_state <= core_hash_out;
                        if (seen_last && need_length_block) begin
                            block_buffer <= 512'b0;
                            block_buffer[511:504] <= 8'h80;
                            for (i = 0; i < 8; i = i + 1)
                                block_buffer[63 - i*8 -: 8] <= total_bits[63 - i*8 -: 8];
                            block_ready <= 1;
                            need_length_block <= 0;
                        end else if (seen_last && !need_length_block) begin
                            state <= DONE;
                        end else begin
                            byte_index <= 0;
                            state <= LOAD;
                        end
                    end
                end
                DONE: begin
                    core_start <= 0;
                end
            endcase
        end
    end
endmodule

`begin_keywords "1800-2023"
`timescale 1ns/1ps
/*verilator lint_off WIDTHTRUNC*/ 
/*verilator lint_off WIDTHEXPAND*/ 
/*verilator lint_off UNSIGNED*/ 
module sha256_core (
    input         clk,
    input         rst,
    input         start,
    input  [511:0] block_in,
    input  [255:0] hash_init,     
    input         use_init,       
    output reg [255:0] hash_out,
    output reg    ready
);
    reg [31:0] K [0:63];
    initial begin
        K[0] = 32'h428a2f98; K[1] = 32'h71374491; K[2] = 32'hb5c0fbcf; K[3] = 32'he9b5dba5;
        K[4] = 32'h3956c25b; K[5] = 32'h59f111f1; K[6] = 32'h923f82a4; K[7] = 32'hab1c5ed5;
        K[8] = 32'hd807aa98; K[9] = 32'h12835b01; K[10] = 32'h243185be; K[11] = 32'h550c7dc3;
        K[12] = 32'h72be5d74; K[13] = 32'h80deb1fe; K[14] = 32'h9bdc06a7; K[15] = 32'hc19bf174;
        K[16] = 32'he49b69c1; K[17] = 32'hefbe4786; K[18] = 32'h0fc19dc6; K[19] = 32'h240ca1cc;
        K[20] = 32'h2de92c6f; K[21] = 32'h4a7484aa; K[22] = 32'h5cb0a9dc; K[23] = 32'h76f988da;
        K[24] = 32'h983e5152; K[25] = 32'ha831c66d; K[26] = 32'hb00327c8; K[27] = 32'hbf597fc7;
        K[28] = 32'hc6e00bf3; K[29] = 32'hd5a79147; K[30] = 32'h06ca6351; K[31] = 32'h14292967;
        K[32] = 32'h27b70a85; K[33] = 32'h2e1b2138; K[34] = 32'h4d2c6dfc; K[35] = 32'h53380d13;
        K[36] = 32'h650a7354; K[37] = 32'h766a0abb; K[38] = 32'h81c2c92e; K[39] = 32'h92722c85;
        K[40] = 32'ha2bfe8a1; K[41] = 32'ha81a664b; K[42] = 32'hc24b8b70; K[43] = 32'hc76c51a3;
        K[44] = 32'hd192e819; K[45] = 32'hd6990624; K[46] = 32'hf40e3585; K[47] = 32'h106aa070;
        K[48] = 32'h19a4c116; K[49] = 32'h1e376c08; K[50] = 32'h2748774c; K[51] = 32'h34b0bcb5;
        K[52] = 32'h391c0cb3; K[53] = 32'h4ed8aa4a; K[54] = 32'h5b9cca4f; K[55] = 32'h682e6ff3;
        K[56] = 32'h748f82ee; K[57] = 32'h78a5636f; K[58] = 32'h84c87814; K[59] = 32'h8cc70208;
        K[60] = 32'h90befffa; K[61] = 32'ha4506ceb; K[62] = 32'hbef9a3f7; K[63] = 32'hc67178f2;
    end
    parameter H0_INIT = 32'h6a09e667;
    parameter H1_INIT = 32'hbb67ae85;
    parameter H2_INIT = 32'h3c6ef372;
    parameter H3_INIT = 32'ha54ff53a;
    parameter H4_INIT = 32'h510e527f;
    parameter H5_INIT = 32'h9b05688c;
    parameter H6_INIT = 32'h1f83d9ab;
    parameter H7_INIT = 32'h5be0cd19;
    reg [31:0] a, b, c, d, e, f, g, h;
    reg [31:0] h0, h1, h2, h3, h4, h5, h6, h7;
    reg [31:0] w [0:63];
    reg [6:0] t;  
    reg [6:0] msg_idx;  
    reg [1:0] state;
    localparam IDLE = 2'd0, PREP = 2'd1, COMP = 2'd2, DONE = 2'd3;
    wire [31:0] T1, T2;
    function [31:0] rightrotate;
        input [31:0] x;
        input [7:0] n;
        begin
            rightrotate = (x >> n) | (x << (32-n));
        end
    endfunction
    function [31:0] ch;
        input [31:0] x, y, z;
        begin
            ch = (x & y) ^ ((~x) & z);
        end
    endfunction
    function [31:0] maj;
        input [31:0] x, y, z;
        begin
            maj = (x & y) ^ (x & z) ^ (y & z);
        end
    endfunction
    function [31:0] sigma0;
        input [31:0] x;
        begin
            sigma0 = rightrotate(x, 2) ^ rightrotate(x, 13) ^ rightrotate(x, 22);
        end
    endfunction
    function [31:0] sigma1;
        input [31:0] x;
        begin
            sigma1 = rightrotate(x, 6) ^ rightrotate(x, 11) ^ rightrotate(x, 25);
        end
    endfunction
    function [31:0] sig0;
        input [31:0] x;
        begin
            sig0 = rightrotate(x, 7) ^ rightrotate(x, 18) ^ (x >> 3);
        end
    endfunction
    function [31:0] sig1;
        input [31:0] x;
        begin
            sig1 = rightrotate(x, 17) ^ rightrotate(x, 19) ^ (x >> 10);
        end
    endfunction
    assign T1 = h + sigma1(e) + ch(e, f, g) + K[t] + w[t];
    assign T2 = sigma0(a) + maj(a, b, c);
    integer i;
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            state <= IDLE;
            ready <= 0;
            hash_out <= 0;
            t <= 0;
            msg_idx <= 0;
            h0 <= H0_INIT;
            h1 <= H1_INIT;
            h2 <= H2_INIT;
            h3 <= H3_INIT;
            h4 <= H4_INIT;
            h5 <= H5_INIT;
            h6 <= H6_INIT;
            h7 <= H7_INIT;
            for (i = 0; i < 64; i = i + 1) begin
                w[i] <= 0;
            end
            $display("RESET: sha256_core reset");
        end else begin
            case (state)
                IDLE: begin
                    if (start) begin
                        $display("IDLE -> PREP: Starting SHA-256 computation");
                        ready <= 0;
                        if (use_init) begin
                            h0 <= hash_init[255:224];
                            h1 <= hash_init[223:192];
                            h2 <= hash_init[191:160];
                            h3 <= hash_init[159:128];
                            h4 <= hash_init[127:96];
                            h5 <= hash_init[95:64];
                            h6 <= hash_init[63:32];
                            h7 <= hash_init[31:0];
                        end else begin
                            h0 <= H0_INIT;
                            h1 <= H1_INIT;
                            h2 <= H2_INIT;
                            h3 <= H3_INIT;
                            h4 <= H4_INIT;
                            h5 <= H5_INIT;
                            h6 <= H6_INIT;
                            h7 <= H7_INIT;
                        end
                        msg_idx <= 0;
                        state <= PREP;
                    end
                end
                PREP: begin
                    if (msg_idx == 0) begin
                        $display("PREP: Preparing message schedule");
                    end
                    if (msg_idx < 16) begin
                        w[msg_idx] <= block_in[511 - 32*msg_idx -: 32];
                        $display("w[%2d] = %h", msg_idx, block_in[511 - 32*msg_idx -: 32]);
                        msg_idx <= msg_idx + 1;
                    end else if (msg_idx < 64) begin
                        w[msg_idx] <= sig1(w[msg_idx-2]) + w[msg_idx-7] + sig0(w[msg_idx-15]) + w[msg_idx-16];
                        $display("w[%2d] = %h (extended)", msg_idx, sig1(w[msg_idx-2]) + w[msg_idx-7] + sig0(w[msg_idx-15]) + w[msg_idx-16]);
                        msg_idx <= msg_idx + 1;
                    end else begin
                        a <= h0;
                        b <= h1;
                        c <= h2;
                        d <= h3;
                        e <= h4;
                        f <= h5;
                        g <= h6;
                        h <= h7;
                        $display("Working vars initialized to: a=%h b=%h c=%h d=%h e=%h f=%h g=%h h=%h", 
                                 h0, h1, h2, h3, h4, h5, h6, h7);
                        t <= 0;
                        state <= COMP;
                    end
                end
                COMP: begin
                    if (t < 64) begin
                        $display("COMP: Round t=%2d", t);
                        $display("Round %2d: a=%h b=%h c=%h d=%h e=%h f=%h g=%h h=%h", 
                                 t, a, b, c, d, e, f, g, h);
                        $display("T1=%h T2=%h w[t]=%h", T1, T2, w[t]);
                        h <= g;
                        g <= f;
                        f <= e;
                        e <= d + T1;
                        d <= c;
                        c <= b;
                        b <= a;
                        a <= T1 + T2;
                        t <= t + 1;
                    end else begin
                        $display("COMP -> DONE: All 64 rounds completed");
                        h0 <= h0 + a;
                        h1 <= h1 + b;
                        h2 <= h2 + c;
                        h3 <= h3 + d;
                        h4 <= h4 + e;
                        h5 <= h5 + f;
                        h6 <= h6 + g;
                        h7 <= h7 + h;
                        $display("Final hash values: h0=%h+%h h1=%h+%h h2=%h+%h h3=%h+%h", 
                                 h0, a, h1, b, h2, c, h3, d);
                        $display("                   h4=%h+%h h5=%h+%h h6=%h+%h h7=%h+%h", 
                                 h4, e, h5, f, h6, g, h7, h);
                        state <= DONE;
                    end
                end
                DONE: begin
                    hash_out <= {h0, h1, h2, h3, h4, h5, h6, h7};
                    $display("DONE: Final hash = %h%h%h%h%h%h%h%h", 
                             h0, h1, h2, h3, h4, h5, h6, h7);
                    ready <= 1;
                    if (!start) begin
                        state <= IDLE;
                    end
                end
            endcase
        end
    end
endmodule

`begin_keywords "1800-2023"
`timescale 1ns/1ps
/*verilator lint_off UNUSED*/ 
/*verilator lint_off UNDRIVEN*/ 
/*verilator lint_off WIDTH*/ 
/*verilator lint_off STMTDLY*/ 
/*verilator lint_off CASEINCOMPLETE*/ 
/*verilator lint_off WIDTHEXPAND*/ 
/*verilator lint_off BLKSEQ*/ 
/*verilator lint_off LATCH*/ 
module sha256_processor_tb(
    input wire ext_clk,
    output reg test_complete,
    output reg test_passed
);
    wire clk;
    reg rst = 0;
    reg start = 0;
    reg [7:0] data_in;
    reg data_valid = 0;
    reg data_last = 0;
    wire [255:0] hash_out;
    wire done;
    assign clk = ext_clk;
    localparam FILE_SIZE = 64;
    sha256_processor uut (
        .clk(clk),
        .rst(rst),
        .start(start),
        .data_in(data_in),
        .data_valid(data_valid),
        .data_last(data_last),
        .hash_out(hash_out),
        .done(done)
    );
    integer i;
    localparam [255:0] EXPECTED_HASH = 256'hffe054fe7ae0cb6dc65c3af9b61d5209f439851db43d0ba5997337df154668eb;
    initial begin
        test_complete = 0;
        test_passed = 0;
        rst = 1;
        data_in = 0;
        data_valid = 0;
        data_last = 0;
        start = 0;
        $display("Starting SHA-256 processor testbench");
        $display("Waiting for clock to start...");
        repeat(3) @(posedge clk);
        $display("Clock detected, starting reset sequence...");
        rst = 1;
        repeat(4) @(posedge clk);   
        rst = 0;
        repeat(2) @(posedge clk);   
        start = 1;
        @(posedge clk);            
        start = 0;
        @(posedge clk);            
        $display("Reset sequence complete, starting to feed data...");
        $display("Feeding %0d bytes of 'a' characters...", FILE_SIZE);
        for (i = 0; i < FILE_SIZE; i = i + 1) begin
            @(negedge clk);
            data_in = 8'h61;  
            data_valid = 1;
            data_last = (i == FILE_SIZE - 1);
            @(negedge clk);
            data_valid = 0;
            data_last = 0;
            if ((i % 16) == 0) begin
                $display("Progress: %0d/%0d bytes processed", i, FILE_SIZE);
            end
        end
        $display("Data input complete, waiting for processing...");
        wait (done);
        $display("Processing complete!");
        if (hash_out == EXPECTED_HASH) begin
            $display("✓ Test PASSED: Hash output matches expected value");
            $display("Hash: %h", hash_out);
            test_passed = 1;
        end else begin
            $display("✗ Test FAILED");
            $display("Expected: %h", EXPECTED_HASH);
            $display("Got     : %h", hash_out);
            test_passed = 0;
        end
        test_complete = 1;
        repeat(10) @(posedge clk);   
        $finish;
    end
    initial begin
        #1000000;  
        $display("Simulation timeout - test did not complete in time!");
        test_complete = 1;
        test_passed = 0;
        $finish;
    end
endmodule
